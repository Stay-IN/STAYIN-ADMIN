{"ast":null,"code":"import axios, { AxiosError, AxiosResponse } from 'axios';\nimport { ApplicationError, LogServices, AuthServices } from 'Services';\nconst logger = LogServices.getInstance('Service:Network');\nconst MESSAGES = {\n  OFFLINE: 'You are offline, Please connect internet',\n  NOT_REACHABLE: 'We are not able to connect to server at the moment',\n  UNKNOWN: 'Something went wrong, Please contact to administrator'\n};\n\nclass NetworkService {\n  handleError(error) {\n    if (error instanceof ApplicationError) {\n      throw error;\n    }\n\n    if (error.message === 'Network Error') {\n      throw new ApplicationError(MESSAGES.NOT_REACHABLE);\n    }\n\n    if (error.response) {\n      logger.error(error.response);\n      throw new ApplicationError(MESSAGES.UNKNOWN);\n    }\n\n    logger.error(error.response);\n    throw new ApplicationError(MESSAGES.UNKNOWN);\n  }\n  /**\n   *\n   * @param {AxiosResponse} response\n   */\n\n\n  handleResponse(response) {\n    if (response.status !== 200 && response.status !== 201) {\n      logger.error(response);\n      throw new ApplicationError(MESSAGES.UNKNOWN);\n    }\n\n    return response.data;\n  }\n\n  getHeader(options) {\n    const header = {};\n\n    if (options && options.headers) {\n      Object.assign(header, options.headers);\n    }\n\n    if (options && options.external) {\n      return header;\n    }\n\n    const token = AuthServices.getToken();\n\n    if (token) {\n      header.Authorization = \"Bearer \".concat(token);\n    }\n\n    return header;\n  }\n  /**\n   * @param {string} url\n   * @param {any} options\n   */\n\n\n  async get(url, options) {\n    logger.debug('get', url);\n\n    try {\n      const response = await axios.get(url, {\n        headers: this.getHeader(options)\n      });\n      logger.debug('get response', response);\n      return this.handleResponse(response);\n    } catch (error) {\n      this.handleError(error);\n    }\n  }\n  /**\n   * @param {string} url\n   * @param {any} data\n   * @param {any} options\n   */\n\n\n  async post(url, data, options) {\n    logger.debug('post', url, data);\n\n    try {\n      const response = await axios.post(url, data, {\n        headers: this.getHeader(options)\n      });\n      logger.debug('post response', response);\n      return this.handleResponse(response);\n    } catch (error) {\n      this.handleError(error);\n    }\n  }\n  /**\n   * @param {string} url\n   * @param {any} data\n   * @param {any} options\n   */\n\n\n  async put(url, data, options) {\n    logger.debug('put', url, data);\n\n    try {\n      const response = await axios.put(url, data, {\n        headers: this.getHeader(options)\n      });\n      logger.debug('put response', response);\n      return this.handleResponse(response);\n    } catch (error) {\n      this.handleError(error);\n    }\n  }\n  /**\n   * @param {string} url\n   * @param {any} options\n   */\n\n\n  async delete(url, options) {\n    logger.debug('delete', url);\n\n    try {\n      const response = await axios.delete(url, {\n        headers: this.getHeader(options)\n      });\n      logger.debug('delete response', response);\n      return this.handleResponse(response);\n    } catch (error) {\n      this.handleError(error);\n    }\n  }\n\n}\n\nexport default new NetworkService();","map":{"version":3,"sources":["/home/anshu/Documents/STAYIN/Stayin/portal/src/Services/NetworkServices.js"],"names":["axios","AxiosError","AxiosResponse","ApplicationError","LogServices","AuthServices","logger","getInstance","MESSAGES","OFFLINE","NOT_REACHABLE","UNKNOWN","NetworkService","handleError","error","message","response","handleResponse","status","data","getHeader","options","header","headers","Object","assign","external","token","getToken","Authorization","get","url","debug","post","put","delete"],"mappings":"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","sourcesContent":["import axios, { AxiosError, AxiosResponse } from 'axios';\nimport { ApplicationError, LogServices, AuthServices } from 'Services';\n\nconst logger = LogServices.getInstance('Service:Network');\n\nconst MESSAGES = {\n  OFFLINE: 'You are offline, Please connect internet',\n  NOT_REACHABLE: 'We are not able to connect to server at the moment',\n  UNKNOWN: 'Something went wrong, Please contact to administrator'\n};\n\nclass NetworkService {\n  handleError(error) {\n    if (error instanceof ApplicationError) {\n      throw error;\n    }\n\n    if (error.message === 'Network Error') {\n      throw new ApplicationError(MESSAGES.NOT_REACHABLE);\n    }\n\n    if (error.response) {\n      logger.error(error.response);\n      throw new ApplicationError(MESSAGES.UNKNOWN);\n    }\n\n    logger.error(error.response);\n    throw new ApplicationError(MESSAGES.UNKNOWN);\n  }\n\n  /**\n   *\n   * @param {AxiosResponse} response\n   */\n  handleResponse(response) {\n    if (response.status !== 200 && response.status !== 201) {\n      logger.error(response);\n      throw new ApplicationError(MESSAGES.UNKNOWN);\n    }\n\n    return response.data;\n  }\n\n  getHeader(options) {\n    const header = {};\n    if (options && options.headers) {\n      Object.assign(header, options.headers);\n    }\n\n    if (options && options.external) {\n      return header;\n    }\n\n    const token = AuthServices.getToken();\n    if (token) {\n      header.Authorization = `Bearer ${token}`;\n    }\n\n    return header;\n  }\n\n  /**\n   * @param {string} url\n   * @param {any} options\n   */\n\n  async get(url, options) {\n    logger.debug('get', url);\n    try {\n      const response = await axios.get(url, {\n        headers: this.getHeader(options)\n      });\n\n      logger.debug('get response', response);\n\n      return this.handleResponse(response);\n    } catch (error) {\n      this.handleError(error);\n    }\n  }\n\n  /**\n   * @param {string} url\n   * @param {any} data\n   * @param {any} options\n   */\n  async post(url, data, options) {\n    logger.debug('post', url, data);\n    try {\n      const response = await axios.post(url, data, {\n        headers: this.getHeader(options)\n      });\n\n      logger.debug('post response', response);\n\n      return this.handleResponse(response);\n    } catch (error) {\n      this.handleError(error);\n    }\n  }\n\n  /**\n   * @param {string} url\n   * @param {any} data\n   * @param {any} options\n   */\n  async put(url, data, options) {\n    logger.debug('put', url, data);\n    try {\n      const response = await axios.put(url, data, {\n        headers: this.getHeader(options)\n      });\n\n      logger.debug('put response', response);\n\n      return this.handleResponse(response);\n    } catch (error) {\n      this.handleError(error);\n    }\n  }\n\n  /**\n   * @param {string} url\n   * @param {any} options\n   */\n  async delete(url, options) {\n    logger.debug('delete', url);\n    try {\n      const response = await axios.delete(url, {\n        headers: this.getHeader(options)\n      });\n\n      logger.debug('delete response', response);\n\n      return this.handleResponse(response);\n    } catch (error) {\n      this.handleError(error);\n    }\n  }\n}\n\nexport default new NetworkService();\n"]},"metadata":{},"sourceType":"module"}