{"ast":null,"code":"import Config from 'Config';\nimport { NetworkServices, LogServices } from 'Services';\nconst logger = LogServices.getInstance('AuthServices');\nconst AUTH_LOCALSTORAGEKEY = 'panther';\n\nclass AuthService {\n  constructor() {\n    const authString = localStorage.getItem(AUTH_LOCALSTORAGEKEY);\n\n    if (authString) {\n      this._auth = JSON.parse(authString);\n    }\n  }\n  /**\n   * @param {string} username\n   * @param {string} password\n   */\n\n\n  async login(username, password) {\n    const response = await NetworkServices.post(\"\".concat(Config.SERVER_URL, \"/login\"), {\n      username,\n      password\n    });\n\n    if (response.success) {\n      localStorage.setItem(AUTH_LOCALSTORAGEKEY, JSON.stringify(response.data));\n      this._auth = response.data;\n    }\n\n    logger.debug(response);\n    return response;\n  }\n\n  isAuthenticated() {\n    if (!this._auth) {\n      return false;\n    }\n\n    if (Date.now() > this._auth.expiredOn) {\n      localStorage.removeItem(AUTH_LOCALSTORAGEKEY);\n      this._auth = undefined;\n      return false;\n    }\n\n    return true;\n  }\n\n  getToken() {\n    if (!this._auth) {\n      return null;\n    }\n\n    return this._auth.token;\n  }\n\n  async logout() {\n    localStorage.removeItem(AUTH_LOCALSTORAGEKEY);\n    this._auth = undefined;\n  }\n\n}\n\nexport default new AuthService();","map":{"version":3,"sources":["/home/anshu/Documents/STAYIN/Stayin/portal/src/Services/AuthServices.js"],"names":["Config","NetworkServices","LogServices","logger","getInstance","AUTH_LOCALSTORAGEKEY","AuthService","constructor","authString","localStorage","getItem","_auth","JSON","parse","login","username","password","response","post","SERVER_URL","success","setItem","stringify","data","debug","isAuthenticated","Date","now","expiredOn","removeItem","undefined","getToken","token","logout"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,SAASC,eAAT,EAA0BC,WAA1B,QAA6C,UAA7C;AAEA,MAAMC,MAAM,GAAGD,WAAW,CAACE,WAAZ,CAAwB,cAAxB,CAAf;AACA,MAAMC,oBAAoB,GAAG,SAA7B;;AAEA,MAAMC,WAAN,CAAkB;AAChBC,EAAAA,WAAW,GAAG;AACZ,UAAMC,UAAU,GAAGC,YAAY,CAACC,OAAb,CAAqBL,oBAArB,CAAnB;;AACA,QAAIG,UAAJ,EAAgB;AACd,WAAKG,KAAL,GAAaC,IAAI,CAACC,KAAL,CAAWL,UAAX,CAAb;AACD;AACF;AAED;;;;;;AAIA,QAAMM,KAAN,CAAYC,QAAZ,EAAsBC,QAAtB,EAAgC;AAC9B,UAAMC,QAAQ,GAAG,MAAMhB,eAAe,CAACiB,IAAhB,WAAwBlB,MAAM,CAACmB,UAA/B,aAAmD;AACxEJ,MAAAA,QADwE;AAExEC,MAAAA;AAFwE,KAAnD,CAAvB;;AAKA,QAAIC,QAAQ,CAACG,OAAb,EAAsB;AACpBX,MAAAA,YAAY,CAACY,OAAb,CAAqBhB,oBAArB,EAA2CO,IAAI,CAACU,SAAL,CAAeL,QAAQ,CAACM,IAAxB,CAA3C;AACA,WAAKZ,KAAL,GAAaM,QAAQ,CAACM,IAAtB;AACD;;AAEDpB,IAAAA,MAAM,CAACqB,KAAP,CAAaP,QAAb;AACA,WAAOA,QAAP;AACD;;AAEDQ,EAAAA,eAAe,GAAG;AAChB,QAAI,CAAC,KAAKd,KAAV,EAAiB;AACf,aAAO,KAAP;AACD;;AAED,QAAIe,IAAI,CAACC,GAAL,KAAa,KAAKhB,KAAL,CAAWiB,SAA5B,EAAuC;AACrCnB,MAAAA,YAAY,CAACoB,UAAb,CAAwBxB,oBAAxB;AACA,WAAKM,KAAL,GAAamB,SAAb;AACA,aAAO,KAAP;AACD;;AAED,WAAO,IAAP;AACD;;AAEDC,EAAAA,QAAQ,GAAG;AACT,QAAI,CAAC,KAAKpB,KAAV,EAAiB;AACf,aAAO,IAAP;AACD;;AACD,WAAO,KAAKA,KAAL,CAAWqB,KAAlB;AACD;;AAED,QAAMC,MAAN,GAAe;AACbxB,IAAAA,YAAY,CAACoB,UAAb,CAAwBxB,oBAAxB;AACA,SAAKM,KAAL,GAAamB,SAAb;AACD;;AAnDe;;AAsDlB,eAAe,IAAIxB,WAAJ,EAAf","sourcesContent":["import Config from 'Config';\nimport { NetworkServices, LogServices } from 'Services';\n\nconst logger = LogServices.getInstance('AuthServices');\nconst AUTH_LOCALSTORAGEKEY = 'panther';\n\nclass AuthService {\n  constructor() {\n    const authString = localStorage.getItem(AUTH_LOCALSTORAGEKEY);\n    if (authString) {\n      this._auth = JSON.parse(authString);\n    }\n  }\n\n  /**\n   * @param {string} username\n   * @param {string} password\n   */\n  async login(username, password) {\n    const response = await NetworkServices.post(`${Config.SERVER_URL}/login`, {\n      username,\n      password\n    });\n\n    if (response.success) {\n      localStorage.setItem(AUTH_LOCALSTORAGEKEY, JSON.stringify(response.data));\n      this._auth = response.data;\n    }\n\n    logger.debug(response);\n    return response;\n  }\n\n  isAuthenticated() {\n    if (!this._auth) {\n      return false;\n    }\n\n    if (Date.now() > this._auth.expiredOn) {\n      localStorage.removeItem(AUTH_LOCALSTORAGEKEY);\n      this._auth = undefined;\n      return false;\n    }\n\n    return true;\n  }\n\n  getToken() {\n    if (!this._auth) {\n      return null;\n    }\n    return this._auth.token;\n  }\n\n  async logout() {\n    localStorage.removeItem(AUTH_LOCALSTORAGEKEY);\n    this._auth = undefined;\n  }\n}\n\nexport default new AuthService();\n"]},"metadata":{},"sourceType":"module"}