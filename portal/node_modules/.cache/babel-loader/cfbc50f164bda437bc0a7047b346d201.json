{"ast":null,"code":"import config from 'Config';\n\nclass LogServices {\n  /**\n   *\n   * @param {string} key\n   */\n  constructor(key) {\n    this._key = key;\n\n    if (config.DEBUG) {\n      this._console = console;\n    } else {\n      this._console = {\n        error: () => undefined,\n        info: () => undefined,\n        log: () => undefined,\n        warn: () => undefined,\n        debug: () => undefined\n      };\n    }\n  }\n  /**\n   *\n   * @param {string} message\n   * @param  {...any[]} optionalParams\n   */\n\n\n  error(message, ...optionalParams) {\n    this._console.log(\"error:\".concat(this._key), message, ...optionalParams);\n  }\n\n  info(message, ...optionalParams) {\n    this._console.log(\"info:\".concat(this._key), message, ...optionalParams);\n  }\n\n  log(message, ...optionalParams) {\n    this._console.log(\"log:\".concat(this._key), message, ...optionalParams);\n  }\n\n  warn(message, ...optionalParams) {\n    this._console.log(\"warn:\".concat(this._key), message, ...optionalParams);\n  }\n\n  debug(message, ...optionalParams) {\n    this._console.debug(\"debug:\".concat(this._key), message, ...optionalParams);\n  }\n  /**\n   *\n   * @param {string} key\n   */\n\n\n  getInstance(key) {\n    return new LogServices(\"\".concat(this._key, \":\").concat(key));\n  }\n\n}\n\nexport default new LogServices('app');","map":{"version":3,"sources":["/home/anshu/Documents/STAYIN/Stayin/portal/src/Services/LogServices.js"],"names":["config","LogServices","constructor","key","_key","DEBUG","_console","console","error","undefined","info","log","warn","debug","message","optionalParams","getInstance"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;;AAEA,MAAMC,WAAN,CAAkB;AAChB;;;;AAIAC,EAAAA,WAAW,CAACC,GAAD,EAAM;AACf,SAAKC,IAAL,GAAYD,GAAZ;;AACA,QAAIH,MAAM,CAACK,KAAX,EAAkB;AAChB,WAAKC,QAAL,GAAgBC,OAAhB;AACD,KAFD,MAEO;AACL,WAAKD,QAAL,GAAgB;AACdE,QAAAA,KAAK,EAAE,MAAMC,SADC;AAEdC,QAAAA,IAAI,EAAE,MAAMD,SAFE;AAGdE,QAAAA,GAAG,EAAE,MAAMF,SAHG;AAIdG,QAAAA,IAAI,EAAE,MAAMH,SAJE;AAKdI,QAAAA,KAAK,EAAE,MAAMJ;AALC,OAAhB;AAOD;AACF;AAED;;;;;;;AAKAD,EAAAA,KAAK,CAACM,OAAD,EAAU,GAAGC,cAAb,EAA6B;AAChC,SAAKT,QAAL,CAAcK,GAAd,iBAA2B,KAAKP,IAAhC,GAAwCU,OAAxC,EAAiD,GAAGC,cAApD;AACD;;AAEDL,EAAAA,IAAI,CAACI,OAAD,EAAU,GAAGC,cAAb,EAA6B;AAC/B,SAAKT,QAAL,CAAcK,GAAd,gBAA0B,KAAKP,IAA/B,GAAuCU,OAAvC,EAAgD,GAAGC,cAAnD;AACD;;AAEDJ,EAAAA,GAAG,CAACG,OAAD,EAAU,GAAGC,cAAb,EAA6B;AAC9B,SAAKT,QAAL,CAAcK,GAAd,eAAyB,KAAKP,IAA9B,GAAsCU,OAAtC,EAA+C,GAAGC,cAAlD;AACD;;AAEDH,EAAAA,IAAI,CAACE,OAAD,EAAU,GAAGC,cAAb,EAA6B;AAC/B,SAAKT,QAAL,CAAcK,GAAd,gBAA0B,KAAKP,IAA/B,GAAuCU,OAAvC,EAAgD,GAAGC,cAAnD;AACD;;AAEDF,EAAAA,KAAK,CAACC,OAAD,EAAU,GAAGC,cAAb,EAA6B;AAChC,SAAKT,QAAL,CAAcO,KAAd,iBAA6B,KAAKT,IAAlC,GAA0CU,OAA1C,EAAmD,GAAGC,cAAtD;AACD;AAED;;;;;;AAIAC,EAAAA,WAAW,CAACb,GAAD,EAAM;AACf,WAAO,IAAIF,WAAJ,WAAmB,KAAKG,IAAxB,cAAgCD,GAAhC,EAAP;AACD;;AAnDe;;AAsDlB,eAAe,IAAIF,WAAJ,CAAgB,KAAhB,CAAf","sourcesContent":["import config from 'Config';\n\nclass LogServices {\n  /**\n   *\n   * @param {string} key\n   */\n  constructor(key) {\n    this._key = key;\n    if (config.DEBUG) {\n      this._console = console;\n    } else {\n      this._console = {\n        error: () => undefined,\n        info: () => undefined,\n        log: () => undefined,\n        warn: () => undefined,\n        debug: () => undefined\n      };\n    }\n  }\n\n  /**\n   *\n   * @param {string} message\n   * @param  {...any[]} optionalParams\n   */\n  error(message, ...optionalParams) {\n    this._console.log(`error:${this._key}`, message, ...optionalParams);\n  }\n\n  info(message, ...optionalParams) {\n    this._console.log(`info:${this._key}`, message, ...optionalParams);\n  }\n\n  log(message, ...optionalParams) {\n    this._console.log(`log:${this._key}`, message, ...optionalParams);\n  }\n\n  warn(message, ...optionalParams) {\n    this._console.log(`warn:${this._key}`, message, ...optionalParams);\n  }\n\n  debug(message, ...optionalParams) {\n    this._console.debug(`debug:${this._key}`, message, ...optionalParams);\n  }\n\n  /**\n   *\n   * @param {string} key\n   */\n  getInstance(key) {\n    return new LogServices(`${this._key}:${key}`);\n  }\n}\n\nexport default new LogServices('app');\n"]},"metadata":{},"sourceType":"module"}